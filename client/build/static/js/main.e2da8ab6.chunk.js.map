{"version":3,"sources":["generated/apollo-components.tsx","components/Teams/Teams.js","components/Home/Home.js","components/App/App.js","index.js"],"names":["PlayerOrderByInput","TeamOrderByInput","TeamsDocument","gql","Teams","baseOptions","ApolloReactHooks","data","loading","error","Accordion","defaultActiveKey","teams","map","team","Card","Header","Toggle","as","Button","variant","eventKey","id","name","abbrev","Collapse","Body","region","city","state","Home","Fragment","src","width","height","App","Navbar","bg","to","Brand","Nav","className","Link","path","component","exact","client","ApolloClient","uri","process","root","ReactDOM","render","document","getElementById"],"mappings":"gJAsEYA,EA+KAC,E,yhBA/KAD,K,eAAAA,E,iBAAAA,E,mBAAAA,E,qBAAAA,E,uBAAAA,E,yBAAAA,E,6BAAAA,E,+BAAAA,E,6BAAAA,E,gCAAAA,M,cA+KAC,K,eAAAA,E,iBAAAA,E,uBAAAA,E,yBAAAA,E,uBAAAA,E,yBAAAA,E,mBAAAA,E,qBAAAA,E,mBAAAA,E,qBAAAA,E,qBAAAA,E,uBAAAA,E,6BAAAA,E,+BAAAA,E,6BAAAA,E,gCAAAA,M,KAiKL,IAAMC,EAAgBC,IAAH,KAsDKA,IAAH,K,4BC/ZbC,EArCD,WAAO,ID2bSC,EC3bV,ED4bLC,IAA2DJ,EAAeG,GC3b9EE,EADS,EACTA,KAAMC,EADG,EACHA,QAASC,EADN,EACMA,MAEtB,OAAID,EAAgB,aAChBC,EAAc,WAGd,kBAACC,EAAA,EAAD,CAAWC,iBAAiB,KACvBJ,EAAKK,MAAMC,KAAI,SAAAC,GAAI,OAChB,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,OAAN,KACQ,kBAACN,EAAA,EAAUO,OAAX,CAAkBC,GAAIC,IAAQC,QAAQ,OAAOC,SAAUP,EAAKQ,IACvDR,EAAKS,KADV,KACkBT,EAAKU,OADvB,MAIR,kBAACd,EAAA,EAAUe,SAAX,CAAoBJ,SAAUP,EAAKQ,IAC/B,kBAACP,EAAA,EAAKW,KAAN,YACSZ,EAAKQ,GAAG,6BADjB,WAEaR,EAAKa,OAFlB,IAE0B,6BAF1B,SAGWb,EAAKc,KAHhB,IAGsB,6BAHtB,UAIYd,EAAKe,MAJjB,IAIwB,qC,gCChBjCC,EAVF,WACT,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,IAAG,iFAAoFC,MAAM,OAAOC,OAAO,SAChH,gDACA,6CC+BGC,EAxBH,WACV,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOjB,QAAQ,QACxB,kBAAC,gBAAD,CAAekB,GAAG,KAChB,kBAACF,EAAA,EAAOG,MAAR,cAEF,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,gBAAD,CAAeH,GAAG,cAAa,kBAACE,EAAA,EAAIE,KAAL,eAC/B,kBAAC,gBAAD,CAAeJ,GAAG,cAAa,kBAACE,EAAA,EAAIE,KAAL,mBAC/B,kBAAC,gBAAD,CAAeJ,GAAG,UAAS,kBAACE,EAAA,EAAIE,KAAL,eAC3B,kBAAC,gBAAD,CAAeJ,GAAG,YAAW,kBAACE,EAAA,EAAIE,KAAL,mBAGjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,aAAaC,UAAWxC,IAEpC,kBAAC,IAAD,CAAOuC,KAAK,IAAIE,OAAK,EAACD,UAAWd,O,uBCpBnCgB,G,MAAS,IAAIC,IAAa,CAC5BC,IAAKC,mDAGHC,EACF,kBAAC,gBAAD,KACI,kBAAC,IAAD,CAAgBJ,OAAQA,GACpB,kBAAC,EAAD,QAIZK,IAASC,OAAOF,EAAMG,SAASC,eAAe,W","file":"static/js/main.e2da8ab6.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type AggregatePlayer = {\n   __typename?: 'AggregatePlayer',\n  count: Scalars['Int'],\n};\n\nexport type AggregateTeam = {\n   __typename?: 'AggregateTeam',\n  count: Scalars['Int'],\n};\n\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteTeam?: Maybe<Team>,\n};\n\n\nexport type MutationDeleteTeamArgs = {\n  where: TeamWhereUniqueInput\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type Player = {\n   __typename?: 'Player',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  number: Scalars['Int'],\n  team: Team,\n  createdAt: Scalars['DateTime'],\n  updatedAt: Scalars['DateTime'],\n};\n\nexport type PlayerConnection = {\n   __typename?: 'PlayerConnection',\n  pageInfo: PageInfo,\n  edges: Array<PlayerEdge>,\n  aggregate: AggregatePlayer,\n};\n\nexport type PlayerEdge = {\n   __typename?: 'PlayerEdge',\n  node: Player,\n  cursor: Scalars['String'],\n};\n\nexport enum PlayerOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  NumberAsc = 'number_ASC',\n  NumberDesc = 'number_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type PlayerWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  number?: Maybe<Scalars['Int']>,\n  number_not?: Maybe<Scalars['Int']>,\n  number_in?: Maybe<Array<Scalars['Int']>>,\n  number_not_in?: Maybe<Array<Scalars['Int']>>,\n  number_lt?: Maybe<Scalars['Int']>,\n  number_lte?: Maybe<Scalars['Int']>,\n  number_gt?: Maybe<Scalars['Int']>,\n  number_gte?: Maybe<Scalars['Int']>,\n  team?: Maybe<TeamWhereInput>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<PlayerWhereInput>>,\n  OR?: Maybe<Array<PlayerWhereInput>>,\n  NOT?: Maybe<Array<PlayerWhereInput>>,\n};\n\nexport type PlayerWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  team?: Maybe<Team>,\n  teams: Array<Team>,\n  teamsConnection: TeamConnection,\n  player?: Maybe<Player>,\n  players: Array<Player>,\n  playersConnection: PlayerConnection,\n};\n\n\nexport type QueryTeamArgs = {\n  where: TeamWhereUniqueInput\n};\n\n\nexport type QueryTeamsArgs = {\n  where?: Maybe<TeamWhereInput>,\n  orderBy?: Maybe<TeamOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryTeamsConnectionArgs = {\n  where?: Maybe<TeamWhereInput>,\n  orderBy?: Maybe<TeamOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryPlayerArgs = {\n  where: PlayerWhereUniqueInput\n};\n\n\nexport type QueryPlayersArgs = {\n  where?: Maybe<PlayerWhereInput>,\n  orderBy?: Maybe<PlayerOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryPlayersConnectionArgs = {\n  where?: Maybe<PlayerWhereInput>,\n  orderBy?: Maybe<PlayerOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type Team = {\n   __typename?: 'Team',\n  id: Scalars['ID'],\n  region: Scalars['String'],\n  abbrev: Scalars['String'],\n  name: Scalars['String'],\n  city: Scalars['String'],\n  state: Scalars['String'],\n  players?: Maybe<Array<Player>>,\n};\n\n\nexport type TeamPlayersArgs = {\n  where?: Maybe<PlayerWhereInput>,\n  orderBy?: Maybe<PlayerOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type TeamConnection = {\n   __typename?: 'TeamConnection',\n  pageInfo: PageInfo,\n  edges: Array<TeamEdge>,\n  aggregate: AggregateTeam,\n};\n\nexport type TeamEdge = {\n   __typename?: 'TeamEdge',\n  node: Team,\n  cursor: Scalars['String'],\n};\n\nexport enum TeamOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  RegionAsc = 'region_ASC',\n  RegionDesc = 'region_DESC',\n  AbbrevAsc = 'abbrev_ASC',\n  AbbrevDesc = 'abbrev_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CityAsc = 'city_ASC',\n  CityDesc = 'city_DESC',\n  StateAsc = 'state_ASC',\n  StateDesc = 'state_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type TeamWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  region?: Maybe<Scalars['String']>,\n  region_not?: Maybe<Scalars['String']>,\n  region_in?: Maybe<Array<Scalars['String']>>,\n  region_not_in?: Maybe<Array<Scalars['String']>>,\n  region_lt?: Maybe<Scalars['String']>,\n  region_lte?: Maybe<Scalars['String']>,\n  region_gt?: Maybe<Scalars['String']>,\n  region_gte?: Maybe<Scalars['String']>,\n  region_contains?: Maybe<Scalars['String']>,\n  region_not_contains?: Maybe<Scalars['String']>,\n  region_starts_with?: Maybe<Scalars['String']>,\n  region_not_starts_with?: Maybe<Scalars['String']>,\n  region_ends_with?: Maybe<Scalars['String']>,\n  region_not_ends_with?: Maybe<Scalars['String']>,\n  abbrev?: Maybe<Scalars['String']>,\n  abbrev_not?: Maybe<Scalars['String']>,\n  abbrev_in?: Maybe<Array<Scalars['String']>>,\n  abbrev_not_in?: Maybe<Array<Scalars['String']>>,\n  abbrev_lt?: Maybe<Scalars['String']>,\n  abbrev_lte?: Maybe<Scalars['String']>,\n  abbrev_gt?: Maybe<Scalars['String']>,\n  abbrev_gte?: Maybe<Scalars['String']>,\n  abbrev_contains?: Maybe<Scalars['String']>,\n  abbrev_not_contains?: Maybe<Scalars['String']>,\n  abbrev_starts_with?: Maybe<Scalars['String']>,\n  abbrev_not_starts_with?: Maybe<Scalars['String']>,\n  abbrev_ends_with?: Maybe<Scalars['String']>,\n  abbrev_not_ends_with?: Maybe<Scalars['String']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  city?: Maybe<Scalars['String']>,\n  city_not?: Maybe<Scalars['String']>,\n  city_in?: Maybe<Array<Scalars['String']>>,\n  city_not_in?: Maybe<Array<Scalars['String']>>,\n  city_lt?: Maybe<Scalars['String']>,\n  city_lte?: Maybe<Scalars['String']>,\n  city_gt?: Maybe<Scalars['String']>,\n  city_gte?: Maybe<Scalars['String']>,\n  city_contains?: Maybe<Scalars['String']>,\n  city_not_contains?: Maybe<Scalars['String']>,\n  city_starts_with?: Maybe<Scalars['String']>,\n  city_not_starts_with?: Maybe<Scalars['String']>,\n  city_ends_with?: Maybe<Scalars['String']>,\n  city_not_ends_with?: Maybe<Scalars['String']>,\n  state?: Maybe<Scalars['String']>,\n  state_not?: Maybe<Scalars['String']>,\n  state_in?: Maybe<Array<Scalars['String']>>,\n  state_not_in?: Maybe<Array<Scalars['String']>>,\n  state_lt?: Maybe<Scalars['String']>,\n  state_lte?: Maybe<Scalars['String']>,\n  state_gt?: Maybe<Scalars['String']>,\n  state_gte?: Maybe<Scalars['String']>,\n  state_contains?: Maybe<Scalars['String']>,\n  state_not_contains?: Maybe<Scalars['String']>,\n  state_starts_with?: Maybe<Scalars['String']>,\n  state_not_starts_with?: Maybe<Scalars['String']>,\n  state_ends_with?: Maybe<Scalars['String']>,\n  state_not_ends_with?: Maybe<Scalars['String']>,\n  players_every?: Maybe<PlayerWhereInput>,\n  players_some?: Maybe<PlayerWhereInput>,\n  players_none?: Maybe<PlayerWhereInput>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<TeamWhereInput>>,\n  OR?: Maybe<Array<TeamWhereInput>>,\n  NOT?: Maybe<Array<TeamWhereInput>>,\n};\n\nexport type TeamWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type TeamsQueryVariables = {};\n\n\nexport type TeamsQuery = (\n  { __typename?: 'Query' }\n  & { teams: Array<(\n    { __typename?: 'Team' }\n    & Pick<Team, 'id' | 'region' | 'abbrev' | 'name' | 'city' | 'state'>\n  )> }\n);\n\nexport type PlayersQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type PlayersQuery = (\n  { __typename?: 'Query' }\n  & { team: Maybe<(\n    { __typename?: 'Team' }\n    & Pick<Team, 'id' | 'region' | 'abbrev' | 'name' | 'city' | 'state'>\n    & { players: Maybe<Array<(\n      { __typename?: 'Player' }\n      & Pick<Player, 'id' | 'name' | 'number'>\n    )>> }\n  )> }\n);\n\n\nexport const TeamsDocument = gql`\n    query teams {\n  teams {\n    id\n    region\n    abbrev\n    name\n    city\n    state\n  }\n}\n    `;\nexport type TeamsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TeamsQuery, TeamsQueryVariables>, 'query'>;\n\n    export const TeamsComponent = (props: TeamsComponentProps) => (\n      <ApolloReactComponents.Query<TeamsQuery, TeamsQueryVariables> query={TeamsDocument} {...props} />\n    );\n    \nexport type TeamsProps<TChildProps = {}> = ApolloReactHoc.DataProps<TeamsQuery, TeamsQueryVariables> | TChildProps;\nexport function withTeams<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TeamsQuery,\n  TeamsQueryVariables,\n  TeamsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TeamsQuery, TeamsQueryVariables, TeamsProps<TChildProps>>(TeamsDocument, {\n      alias: 'teams',\n      ...operationOptions\n    });\n};\n\n/**\n * __useTeamsQuery__\n *\n * To run a query within a React component, call `useTeamsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTeamsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTeamsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useTeamsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeamsQuery, TeamsQueryVariables>) {\n        return ApolloReactHooks.useQuery<TeamsQuery, TeamsQueryVariables>(TeamsDocument, baseOptions);\n      }\nexport function useTeamsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamsQuery, TeamsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TeamsQuery, TeamsQueryVariables>(TeamsDocument, baseOptions);\n        }\nexport type TeamsQueryHookResult = ReturnType<typeof useTeamsQuery>;\nexport type TeamsLazyQueryHookResult = ReturnType<typeof useTeamsLazyQuery>;\nexport type TeamsQueryResult = ApolloReactCommon.QueryResult<TeamsQuery, TeamsQueryVariables>;\nexport const PlayersDocument = gql`\n    query players($id: ID!) {\n  team(where: {id: $id}) {\n    id\n    region\n    abbrev\n    name\n    city\n    state\n    players {\n      id\n      name\n      number\n    }\n  }\n}\n    `;\nexport type PlayersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<PlayersQuery, PlayersQueryVariables>, 'query'> & ({ variables: PlayersQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const PlayersComponent = (props: PlayersComponentProps) => (\n      <ApolloReactComponents.Query<PlayersQuery, PlayersQueryVariables> query={PlayersDocument} {...props} />\n    );\n    \nexport type PlayersProps<TChildProps = {}> = ApolloReactHoc.DataProps<PlayersQuery, PlayersQueryVariables> | TChildProps;\nexport function withPlayers<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  PlayersQuery,\n  PlayersQueryVariables,\n  PlayersProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, PlayersQuery, PlayersQueryVariables, PlayersProps<TChildProps>>(PlayersDocument, {\n      alias: 'players',\n      ...operationOptions\n    });\n};\n\n/**\n * __usePlayersQuery__\n *\n * To run a query within a React component, call `usePlayersQuery` and pass it any options that fit your needs.\n * When your component renders, `usePlayersQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePlayersQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePlayersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PlayersQuery, PlayersQueryVariables>) {\n        return ApolloReactHooks.useQuery<PlayersQuery, PlayersQueryVariables>(PlayersDocument, baseOptions);\n      }\nexport function usePlayersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PlayersQuery, PlayersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<PlayersQuery, PlayersQueryVariables>(PlayersDocument, baseOptions);\n        }\nexport type PlayersQueryHookResult = ReturnType<typeof usePlayersQuery>;\nexport type PlayersLazyQueryHookResult = ReturnType<typeof usePlayersLazyQuery>;\nexport type PlayersQueryResult = ApolloReactCommon.QueryResult<PlayersQuery, PlayersQueryVariables>;","import React from 'react'\nimport {useTeamsQuery} from '../../generated/apollo-components'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Card from 'react-bootstrap/Card'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Button from 'react-bootstrap/Button'\nimport {Link} from 'react-router-dom'\n\nconst Teams = () => {\n    const {data, loading, error} = useTeamsQuery()\n\n    if (loading) return 'Loading...'\n    if (error) return 'Error...'\n\n    return(\n        <Accordion defaultActiveKey=\"0\">\n            {data.teams.map(team => ( \n                <Card>\n                    <Card.Header>\n                            <Accordion.Toggle as={Button} variant=\"link\" eventKey={team.id}>\n                                {team.name} ({team.abbrev})\n                            </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey={team.id}>\n                        <Card.Body>\n                            id: {team.id}<br/>\n                            Region: {team.region} <br/>\n                            City: {team.city} <br/>\n                            State: {team.state} <br/>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n            ))}\n        </Accordion>\n        // <ListGroup>\n        //     {data.teams.map(team => (\n        //         <Link key={team.id} to={`/teams/${team.id}`}>\n        //             <ListGroup.Item key={team.id}>{team.name}</ListGroup.Item>\n        //         </Link>\n        //     ))}\n        // </ListGroup>\n        \n    )\n}\n\nexport default Teams","import React from 'react'\n\nconst Home = () => {\n    return (\n        <React.Fragment>\n            <img src={`https://websterapartments.org/wp-content/uploads/2015/03/MarchMadness-main.jpg`} width=\"100%\" height=\"100%\"/>\n            <h1>March Madness!!!</h1>\n            <h2>NCAAM Teams</h2>\n        </React.Fragment>\n    )\n}\n\nexport default Home;","import React from 'react'\nimport Teams from '../Teams/Teams'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\nimport {\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport {LinkContainer} from 'react-router-bootstrap'\nimport Home from '../Home/Home'\n\nconst App = () => {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <LinkContainer to=\"/\">\n          <Navbar.Brand>Home</Navbar.Brand>\n        </LinkContainer>\n        <Nav className=\"mr-auto\">\n          <LinkContainer to=\"/teamspage\"><Nav.Link>Teams</Nav.Link></LinkContainer>\n          <LinkContainer to=\"/standings\"><Nav.Link>Standings</Nav.Link></LinkContainer>\n          <LinkContainer to=\"/stats\"><Nav.Link>Stats</Nav.Link></LinkContainer>\n          <LinkContainer to=\"/ranking\"><Nav.Link>Ranking</Nav.Link></LinkContainer>\n        </Nav>\n      </Navbar>\n      <Switch>\n        <Route path=\"/teamspage\" component={Teams}/>\n        {/* <Route path=\"/team\" component={Team}/> */}\n        <Route path=\"/\" exact component={Home} />\n      </Switch>\n    \n   </div>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\n\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from '@apollo/react-hooks'\n\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_APOLLO_SERVER || '{http://localhost:4000}',\n})\n\nconst root = (\n    <Router>\n        <ApolloProvider client={client}>\n            <App/>\n        </ApolloProvider>\n    </Router>\n)\nReactDOM.render(root, document.getElementById('root'));\n"],"sourceRoot":""}